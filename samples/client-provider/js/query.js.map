{"version":3,"sources":["../query.fsx"],"names":[],"mappings":";;;;;;;;;;;;;AAWgB;AAGA;AACA;;AAQhB,CAaG;AAAA;AAAoB,CAbvB;AAAA,0BACI;AAAA;AAAA,2CAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuD,iBAAvD;AAAuD,aAAvD;AAAuD,SAAvD;AAAA;AAAuD,SAAvD,OAAZ,GACA;AAAA;AAAA,iCAAM,+BAGF;AAAA;AAAA;AAAA,kCAAQ,2CAAR;AAAA;AAAA;AAAA;AAAuB,qBAAvB;AAAuB,iBAAvB;AAAuB,aAAvB,eAHE,EAIF;AAAA;AAAA;AAAA,kCAAQ,+CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2B,6BAA3B;AAA2B,yBAA3B;AAA2B,qBAA3B;AAA2B,iBAA3B;AAA2B,aAA3B,aACuB,sBAAe;AAAA;AAAA;AAAA;AAAgC,iBAAhC;AAAgC,aAAhC,EAAf,CADvB,CAJE,EAMM,oDAAR;AAAA;AAAA,cANE,EAQC;AAAA;AAAA,+BACA,SAAY;AAAA;AAAA,8BAAQ,kCAAR;AAAA;AAAA;AAAA;AAAc,iBAAd;AAAc,aAAd,EAAZ,CATD,EAOF,mBAPE,WACI,mBADJ,CAAN;AASkC,SAVlC;AAAmE,KADvE;AAAK,CAAL;;AA2BgB","file":"query.js","sourcesContent":["ï»¿// #r \"../../bin/FSharp.Data.GraphQL.Client/Hopac.dll\"\n#r \"../../bin/FSharp.Data.GraphQL.Client/FSharp.Data.GraphQL.Client.dll\"\n#r \"../../../Fable/build/fable/bin/Fable.Core.dll\"\n\nopen FSharp.Data.GraphQL\nopen System.Collections.Generic\n\n#if FABLE\nFable.Import.Node.require.Invoke(\"isomorphic-fetch\") |> ignore\n#endif\n\nlet [<Literal>] serverUrl = \"http://localhost:8083\"\n\n// The name and arguments of the query will be automatically set by the type provider\nlet [<Literal>] queryFields = \"{ id, name, appearsIn, friends { name } }\"\nlet [<Literal>] queryFieldsWithFragments = \"{ ...data, friends { name } } fragment data on Human { id, name, appearsIn }\"\n\ntype MyClient = GraphQLProvider<serverUrl>\n\n// let droid =\n//     MyClient.Queries.Droid<queryFields>(\"2000\")\n//     |> Async.RunSynchronously\n\nasync {\n    let! hero = MyClient.Queries.Hero<queryFieldsWithFragments>(\"1000\")\n    match hero with\n    | None -> ()\n    | Some hero ->\n        printfn \"My hero is %A\" hero.name\n        printfn \"Appears in %O: %b\" MyClient.Types.Episode.Empire\n            (hero.appearsIn |> Array.exists ((=) MyClient.Types.Episode.Empire))\n        printfn \"My hero's friends are:\"\n        hero.friends\n        |> Array.choose (fun x -> x.name)\n        |> Array.iter (printfn \"- %s\")\n}\n|> Async.StartImmediate\n\n// let freeQuery = \"{ hero(id: \\\"1000\\\"){ id, name, appearsIn, friends { name } } }\"\n\n// let hero2 =\n//     MyClient.Query(freeQuery)\n//     |> Async.Catch\n//     |> Async.RunSynchronously\n//     |> function\n//     | Choice1Of2 data -> (data :?> IDictionary<string,obj>).[\"hero\"] :?> MyClient.Types.Human |> Some\n//     | Choice2Of2 err -> printfn \"ERROR: %s\" err.Message; None\n\n// printfn \"%A\" hero2.Value.name\n\nlet [<Literal>] queryFields2 = \"{ id, name\"\n// This code won't compile as the query is not properly formed\n//MyClient.QueryHero<queryFields2>(\"1000\")\n\n"]}